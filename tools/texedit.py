from PIL import Image

import numpy as np
import argparse as ap
import os


def main():
    parser = ap.ArgumentParser(
        prog = "Texedit", 
        description = '\n'.join([
            "Texedit - Tool for simple image transforms.",
            "",
            "The tool accepts a transform function in the form of valid python code.",
            "Each pixel in the output image is generated by one invocation of this function.",
            "The function may use the following environment variables:",
            "   x, y    - Integer values containing the position of the current pixel.",
            "   i[x, y] - 4-element tuple containing the value of the input image at x, y.",
            "   si      - 2-element tuple containing the size of the input image.",
            "   so      - 2-element tuple containing the size of the output image.",
            "The function should evaluate to a new 4-element tuple, which will be used as the pixel value for the output image.",
            "All pixel values should be in the range [0, 255]."
        ]),
        formatter_class = ap.RawDescriptionHelpFormatter
    )
    
    parser.add_argument('-i',  metavar = "input_image_path",    help = 'Path to input image',  required = True)
    parser.add_argument('-o',  metavar = "output_image_path",   help = 'Path to output image', required = True)
    parser.add_argument('-t',  metavar = "pixel_transform_fn",  help = 'Transform to apply to each pixel', required = True)
    parser.add_argument('-sx', metavar = "output_image_width",  help = 'Width of the output image.',  required = False, default = 0)
    parser.add_argument('-sy', metavar = "output_image_height", help = 'Height of the output image.', required = False, default = 0)
    parser.add_argument('-wd', metavar = "working_directory",   help = 'Working directory (Defaults to out_dirs/assets/textures).', required = False, default = '../out_dirs/assets/textures')
    args = parser.parse_args()
    
    
    os.chdir(args.wd)
    
    
    input_img = Image.open(args.i)
    i  = input_img.load()
    si = input_img.size
    
    if args.sx == 0: args.sx = input_img.size[0]
    if args.sy == 0: args.sy = input_img.size[1]
    
    output_img = Image.new(mode = 'RGBA', size = (args.sx, args.sy), color = (0, 0, 0, 255))
    o  = output_img.load()
    so = output_img.size
    
    
    for x in range(so[0]):
        for y in range(so[1]):
            o[x, y] = eval(args.t)
            
    
    output_img.save(args.o)


if __name__ == '__main__': main()